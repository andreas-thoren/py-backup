Reviewing your Python code for the `DirComparator` class, here are some observations and suggestions on various aspects such as structure, naming conventions, and potential improvements.

### General Observations

- **Purpose and Functionality:** The class design and its purpose are clear. It provides a structured way to compare directories, which is a useful tool for backup or synchronization tasks.

### Code Structure and Clarity

- **Class and Enum Naming:** The naming of classes and enums (`FileType`, `FileStatus`, `DirComparator`) is descriptive and follows Python conventions. This makes the code easier to understand and maintain.
- **Method and Variable Naming:** Method names (`compare_directories`, `_recursive_scandir_cmpr`, `_get_file_type`, etc.) and variable names are generally descriptive and follow Python naming conventions. This enhances readability.
- **Exception Handling:** The custom exception `InfiniteDirTraversalLoopError` is a good practice for handling specific error scenarios, improving error specificity and clarity in debugging.

### Suggestions for Improvements

1. **Docstrings and Comments:**
   - Adding docstrings for each class and method would significantly improve code readability and maintainability. While there are some comments, consistent and comprehensive documentation using docstrings is essential for public methods and the class itself.
   - The `TODO` comments suggest unfinished areas. Prioritize completing these, especially checks for symlink loops and ensuring `dir1` is not equal to `dir2`.

2. **Error Handling:**
   - Consider more granular error handling where possible, especially in `_get_file_type` and file comparison methods, to handle specific error cases more gracefully.
   - Use logging instead of `print` for error messages and warnings to provide more control over the logging level and output formatting.

3. **Code Efficiency:**
   - In `_compare_dir_entries`, the method could potentially be optimized for large directories by more efficient data structures or algorithms, depending on the size of directories and the number of entries.

4. **Functionality Enhancements:**
   - Implement the commented-out feature for detecting junctions once you move to Python 3.12 or higher, as this will improve the utility of your tool on systems that use junctions.
   - Consider adding functionality to handle more `FileStatus` cases like `NEWER` and `OLDER` if relevant to your application's requirements.

5. **Code Robustness:**
   - Ensure that recursive directory traversal (`_recursive_scandir_cmpr`) has adequate safeguards against extremely deep directory structures to prevent stack overflow or excessive resource consumption.

6. **Unit Testing:**
   - If not already done, create a suite of unit tests for this module. Testing various scenarios, including edge cases like empty directories, directories with only symlinks, and permission-denied scenarios, will ensure reliability and facilitate maintenance.

### Python Coding Conventions

- Your code largely adheres to PEP 8 standards, which is excellent. However, make sure line lengths do not exceed the recommended limit (79 characters for code, 72 for comments), and break lines accordingly.
- Use type hints wherever possible. You've done this well, but ensure consistency across the entire module.

### Potential for Refactoring

- You might consider refactoring the class to separate concerns further, such as directory walking, entry comparison, and result formatting, into separate classes or modules. This would make the code more modular and easier to extend or modify in the future.

### Conclusion

Overall, your `DirComparator` module is well-structured and follows good programming practices. Addressing the suggestions above will enhance its clarity, robustness, and maintainability.